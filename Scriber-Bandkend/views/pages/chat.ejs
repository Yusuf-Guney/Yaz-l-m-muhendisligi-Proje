<!DOCTYPE html>
<html lang="tr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Chat Uygulaması</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

  <style>
    body, html {
      height: 100%;
      margin: 0;
      font-family: Arial, sans-serif;
      background: url('/static/images/bg.jpg') no-repeat center center fixed;
      background-size: cover;
      overflow: hidden;
    }

    body::before {
      content: '';
      position: absolute;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background: rgba(0, 0, 0, 0.6);
      z-index: 0;
    }

    /* --- Mevcut chat-container stilin (kısmen alıntı) --- */
.chat-container {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 80vh;
  background: rgba(255,255,255,0.1);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  padding: 20px;
  box-shadow: 0 8px 32px rgba(0,0,0,0.5);
  color: #fff;
}
    /* Profil Alanı */
    .chat-profile {
      width: 100%;
      background: rgba(0, 0, 0, 0.5);
      border-radius: 10px;
      padding: 10px;
      display: flex;
      align-items: center;
      margin-bottom: 15px;
    }

    .chat-profile img {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      object-fit: cover;
      margin-right: 10px;
      border: 2px solid white;
    }

    .chat-profile .profile-name {
      font-size: 1rem;
      font-weight: bold;
    }

    .chat-header {
      text-align: center;
      font-size: 1.5rem;
      margin-bottom: 10px;
    }

    /* Sohbet Mesajları Alanı */
    .chat-messages {
      flex-grow: 1;
      background: rgba(0, 0, 0, 0.5);
      border-radius: 10px;
      padding: 15px;
      overflow-y: auto;
      margin-bottom: 15px;
    }

    .message {
      background: rgba(255, 255, 255, 0.2);
      position: relative;
      padding: 1.5rem 1.5rem 1.5rem; /* üstte isim için boşluk */
      padding: 10px 15px;
      border-radius: 10px;
      margin-bottom: 10px;
      max-width: 75%;
      
    }

    .message.user {
    align-self: flex-end;
    background-color: rgba(0, 123, 255, 0.4);
    margin-left:auto;
    font-size: 0.75rem;
    font-weight: 600;
    color: rgba(255,255,255,0.85);
    top: 8px;
    left: 12px;
    padding: 10px 10px;
    border-radius: 10px;
    margin-bottom: 10px;
    align-items: center;
    }

    .message .timestamp {
    position: absolute;
    bottom: 6px;
    right: 10px;
    font-size: 0.7rem;
    color: rgba(255,255,255,0.6);
}

/* Resim ve videolara profesyonel, responsive boyutlandırma */
.message img,
.message video {
  max-width: 100%;
  max-height: 300px;
  height: auto;
  border-radius: 8px;
  margin-top: 0.5rem; /* ismin altına biraz boşluk */
  display: block;
  object-fit: cover;
}

/* Dosya linki ve ikon */
.message a.file-link {
  display: inline-flex;
  align-items: center;
  gap: 6px;
  font-size: 0.9rem;
  color: #cce5ff;
  text-decoration: none;
}
.message a.file-link i {
  font-size: 1.2rem;
}

    .chat-input {
      display: flex;
      gap: 10px;
    }

    .chat-input input {
      flex: 1;
      padding: 10px;
      border-radius: 10px;
      border: none;
      background: rgba(255, 255, 255, 0.2);
      color: white;
    }

    .chat-input button {
      padding: 10px 20px;
      border: none;
      border-radius: 10px;
      background: white;
      color: black;
      font-weight: bold;
      cursor: pointer;
      transition: 0.3s ease;
    }

    .chat-input button:hover {
      background: #ddd;
    }

    ::placeholder {
      color: rgba(255,255,255,0.7);
    }

    /* Scrollbar */
    .chat-messages::-webkit-scrollbar {
      width: 6px;
    }
    .chat-messages::-webkit-scrollbar-thumb {
      background-color: rgba(255,255,255,0.3);
      border-radius: 5px;
    }
    .loading {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 20px;
}

.spinner {
  width: 40px;
  height: 40px;
  border: 5px solid rgba(255, 255, 255, 0.3);
  border-top: 5px solid white;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

/* Bütün sayfa çapında flex düzeni */
.chat-wrapper {
  display: flex;
  height: 100vh;
  width: 100vw;
}

/* SOL PANEL: sohbet listesi */
.chat-list-panel {
  position: absolute;
  top: 20px;
  left: 20px;
  width: 25%;                    /* İstediğin kadar genişlet */
  bottom: 20px;                    /* Yüksekliği ayarla */
  background: rgba(255,255,255,0.1);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  box-shadow: 0 8px 32px rgba(0,0,0,0.5);
  display: flex;
  flex-direction: column;
  overflow: hidden;
  z-index: 1;
}

/* Başlık kısmı */
.chat-list-header {
  padding: 15px;
  font-size: 1.3rem;
  border-bottom: 1px solid rgba(255,255,255,0.3);
  color: #fff;
}

/* Liste kapsayıcı */
.chat-list {
  flex: 1;
  margin: 0;
  padding: 10px;
  list-style: none;
  overflow-y: auto;
}

/* Bireysel sohbet kartları */
.chat-list li {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 10px 15px;
  margin-bottom: 10px;
  background-color: rgba(255,255,255,0.15);
  border-radius: 12px;
  cursor: pointer;
  transition: background 0.2s;
  color: #fff;
}
.chat-list li:hover {
  background-color: rgba(255,255,255,0.25);
}

/* Profil foto */
.chat-list .avatar {
  width: 45px;
  height: 45px;
  border-radius: 50%;
  object-fit: cover;
}

/* İsim + son mesaj */
.chat-list .chat-info {
  flex: 1;
  overflow: hidden;
}
.chat-list .chat-info .name {
  font-weight: 600;
  font-size: 1rem;
}
.chat-list .chat-info .last-message {
  display: block;
  font-size: 0.85rem;
  color: rgba(255,255,255,0.8);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* SAĞ PANEL: sohbet kutusu */
.chat-box {
  flex: 1;                /* kalan genişliği doldur */
  padding: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.chat-main-wrapper {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);  /* tam ortaya getirir */
  z-index: 2;
  /* opsiyonel olarak şöyle bir max-width ekleyebilirsin */
  width: 500px; 
  max-width: 90vw;
}

/* Spin animasyonu */
@keyframes spin {
  to { transform: rotate(360deg); }
}
/*profile*/
/* Sağ üst profil menüsü */
.profile-menu {
  position: absolute;
  top: 20px;
  right: 20px;
  z-index: 999;
}

.profile-avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  border: 2px solid #fff;
  cursor: pointer;
}

/* Dropdown kapalıyken gizle */
.profile-dropdown {
  position: absolute;
  top: calc(100% + 8px);
  right: 0;
  background: rgba(0,0,0,0.8);
  backdrop-filter: blur(8px);
  border-radius: 8px;
  box-shadow: 0 4px 16px rgba(0,0,0,0.5);
  display: none;
  min-width: 150px;
}

/* Menü kalemi stili */
.profile-dropdown ul {
  list-style: none;
  margin: 0;
  padding: 8px 0;
}
.profile-dropdown li {
  padding: 8px 16px;
}
.profile-dropdown li + li {
  border-top: 1px solid rgba(255,255,255,0.2);
}
.profile-dropdown a {
  color: #fff;
  text-decoration: none;
  font-size: 0.95rem;
  display: block;
}
.profile-dropdown a:hover {
  background: rgba(255,255,255,0.1);
}

  </style>
</head>
<body>
  <div class="profile-menu">
    <img src="/static/images/profile.jpg" alt="Profil" class="profile-avatar" />
    <div class="profile-dropdown">
      <ul>
        <li><a href="/profile">Profilim</a></li>
        <li><a href="/settings">Ayarlar</a></li>
        <li><a href="/logout">Çıkış Yap</a></li>
      </ul>
    </div>
  </div>
  <div class="chat-wrapper">
    <!-- SOL: Sohbet Listesi Paneli -->
    <aside class="chat-list-panel">
      <div class="chat-list-header">Sohbetler</div>
      <ul id="chatListContainer" class="chat-list">
        
      </ul>
    </aside>
  
  
    <!-- SAĞ: Mevcut Sohbet Kutusu -->
    <div class="chat-main-wrapper">
      <div class="chat-container">
        <div class="chat-profile">
          <img src="/static/images/profile.jpg" alt="Profil Fotoğrafı" id="toprofile_img" class="avatar" />
          <div class="profile-name" id="toprofilename">Kullanıcı Adı</div>
        </div>
     
        <div class="chat-messages" id="chatMessages">
            
            <div class="chat-header">Sohbet</div>
            
        </div>
        <div class="chat-input">
          <input type="text" id="messageInput" placeholder="Mesajınızı yazın..." />
          <button onclick="sendMessage()">Gönder</button>
        </div>
      </div>
    
      <!-- … senin mevcut .chat-container içeriğin … -->
    </section>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/jwt-decode/build/jwt-decode.min.js"></script>
  <script src="/static/js/auth.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const socket = io('http://localhost:3001', {
        transports: ['websocket'],
      }); // Sunucuya bağlan :contentReference[oaicite:4]{index=4}

      const userId = getUserIdFromToken(); // Token'dan kullanıcı ID'sini al
      const chatListEl    = document.getElementById('chatListContainer');
      const messagesEl    = document.getElementById('chatMessages');
      const messageInput  = document.getElementById('messageInput');
      const sendBtn       = document.querySelector('.chat-input button');
      const profileNameEl = document.getElementById('toprofilename');
      const profileImgEl  = document.getElementById('toprofile_img');

      let currentRoomId = null;
      const token = localStorage.getItem('token');

      // 1) Kullanıcı girişi yapıldığında kendine özel odaya katıl
      socket.emit('join-user', { userId }); 
      // Bu sayede sunucu senin user_<> odana emit yapabilir :contentReference[oaicite:5]{index=5}
      const BaseFileUrl = 'http://127.0.0.1:3000/api/file/'
      // 2) Sohbet listesini getir
      socket.emit('get-chat-list', token);

      socket.on('receive-chat-list', (chats) => {
        chatListEl.innerHTML = '';
        chats.forEach(c => {
            console.log(c); // Debugging için
          const li = document.createElement('li');
          li.innerHTML = `
            <img src="${BaseFileUrl}${c.isGroupChat ? `chat?url=${c.chatImage}` : (c.participants[0].user !== userId ? `user?url=${c.participants[0].user.avatar}` :`user?url=${c.participants[1].user.avatar}`)} " class="avatar" />
            <div class="chat-info">
              <div class="name">${c.isGroupChat ? c.chatName : (c.participants[0].user !== userId ? c.participants[0].user.name : c.participants[1].user.name)}</div>
              <div class="last-message">${c.latestMessage?.content || ''}</div>
            </div>
          `;
          li.addEventListener('click', () => {
            // odaya katıl ve mesajları çek
            currentRoomId = c._id;
            socket.emit('join-room', { roomId: currentRoomId });
            socket.emit('get-messages', { token, chatId: currentRoomId });
            // Profil başlığı güncelle
            profileNameEl.textContent = c.isGroupChat ? c.chatName : (c.participants[0].user !== userId ? c.participants[0].user.name : c.participants[1].user.name);
            profileImgEl.src = c.isGroupChat ? (c.chatImage ? `${BaseFileUrl}chat?url=${c.chatImage}` : '/static/images/profile.jpg') : (c.participants[0].user !== userId ? `${BaseFileUrl}user?url=${c.participants[0].user.avatar}` : `${BaseFileUrl}user?url=${c.participants[1].user.avatar}`);
          });
          chatListEl.appendChild(li);
        });
      });

      // 3) Mevcut odanın mesajlarını al
      socket.on('receive-messages', ({ messages }) => {
        console.log(messages); // Debugging için
        messagesEl.innerHTML = '';
        messages.forEach(m => appendMessage(m));
      });

      // 4) Yeni mesaj geldiğinde listeye ekle
      socket.on('receive-message', (m) => {
        appendMessage(m);
      });

      // Mesaj gönderme
      sendBtn.addEventListener('click', sendMessage);
      messageInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') sendMessage();
      });

      function sendMessage() {
        const content = messageInput.value.trim();
        if (!content || !currentRoomId) return;
        // File upload desteği eklemek istersen:
        const file = null; // örnek: input[type=file]’dan alınabilir
        socket.emit('send-message', { chatId: currentRoomId, token, content, file });
        messageInput.value = '';
      }


      // Mesajı DOM’a ekleyen yardımcı fonksiyon
      function appendMessage(m) {
  // 1. Mesaj kapsayıcı
  const div = document.createElement('div');
 
  div.classList.add('message');

// 2) Eğer kendi mesajınsa 'user' sınıfını ekle
if (m.sender._id === userId) {
  div.classList.add('user');
}
  // 2. Kimden geldiğini belli eden avatar veya isim (opsiyonel)
  const sender = document.createElement('div');
  sender.classList.add('sender');
  sender.textContent = m.sender.name;
  div.appendChild(sender);

  // 3. Mesaj içeriğini türüne göre ekle
  switch (m.messageType) {
    case 'text':
      // Sadece metin
      const p = document.createElement('p');
      p.textContent = m.content;
      div.appendChild(p);
      break;

      case 'file':
  if (m.attachments && m.attachments.length > 0) {
    const att = m.attachments[0];
    const fileUrl = `${BaseFileUrl}user?url=${att.url}`;
    const ext = (att.originalName || att.url).split('.').pop().toLowerCase();
    // uzantıya göre ikon haritası
    const iconMap = {
      pdf: 'bi-file-earmark-pdf-fill',
      doc: 'bi-file-earmark-word-fill',
      docx: 'bi-file-earmark-word-fill',
      xls: 'bi-file-earmark-excel-fill',
      xlsx: 'bi-file-earmark-excel-fill',
      ppt: 'bi-file-earmark-ppt-fill',
      pptx: 'bi-file-earmark-ppt-fill',
      txt: 'bi-file-earmark-text',
      zip: 'bi-file-earmark-zip-fill',
      default: 'bi-file-earmark-fill'
    };
    const iconClass = iconMap[ext] || iconMap.default;

    // link oluştur
    const fileLink = document.createElement('a');
    fileLink.href = fileUrl;
    fileLink.target = '_blank';
    fileLink.classList.add('file-link');

    // ikon
    const icon = document.createElement('i');
    icon.classList.add('bi', iconClass);
    fileLink.appendChild(icon);

    // metin
    const text = document.createTextNode(att.originalName || 'Dosyayı Görüntüle');
    fileLink.appendChild(text);

    div.appendChild(fileLink);
  } else {
    const fallback = document.createElement('p');
    fallback.textContent = 'Dosya bulunamadı';
    div.appendChild(fallback);
  }
  break;
    case 'image':
      // <img>
      const img = document.createElement('img');
      img.src = `${BaseFileUrl}user?url=${m.attachments[0].url}`;
      img.alt = m.attachments[0].mimeType;
      img.style.maxWidth = '200px';
      img.style.borderRadius = '8px';
      div.appendChild(img);
      break;

    case 'video':
      // <video controls>
      const video = document.createElement('video');
      video.src = `${BaseFileUrl}user?url=${m.attachments[0].url}`;
      video.controls = true;
      video.style.maxWidth = '300px';
      div.appendChild(video);
      break;

    default:
      // Bilinmeyen tür, içeriği ham olarak ekle
      const fallback = document.createElement('p');
      fallback.textContent = m.content || '[Desteklenmeyen mesaj türü]';
      div.appendChild(fallback);
  }

  // 4. Zaman damgası (opsiyonel)
  const time = document.createElement('span');
  const date = new Date(m.createdAt);
  time.classList.add('timestamp');
  time.textContent = date.toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' });
  div.appendChild(time);

  // 5. Mesaj kutusuna ekle ve scroll’u en sona kaydır
  messagesEl.appendChild(div);
  messagesEl.scrollTop = messagesEl.scrollHeight;
}

      // Bağlantı hatası / kesilme log’lama
      socket.on('disconnect', () => console.warn('Socket bağlantısı kesildi'));
      socket.on('connect_error', (err) => console.error('Bağlantı hatası:', err));
    });

   
  </script>

</body>
</html>
